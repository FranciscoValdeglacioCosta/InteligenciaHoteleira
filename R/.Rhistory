Database = "CMT",
UID = "cm",
PWD = rstudioapi::askForPassword("cm")
Port = 1433)
library(odbc)
con <- dbConnect(odbc(),
Driver = "SQLServer",
Server = "localhost",
Database = "CMT",
UID = "cm",
PWD = rstudioapi::askForPassword("cm")
Port = 1433)
library(odbc)
con <- dbConnect(odbc(),
Driver = "SQLServer",
Server = "localhost",
Database = "CMT",
UID = "cm",
PWD = rstudioapi::askForPassword("cm")
Port = 1433)
uat_conn = odbcConnect("UAT")
library(RODBC)
uat_conn = odbcConnect("UAT")
library(RODBC)
uat_conn = odbcConnect("UAT")
library(RODBC)
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=CMT;Uid=cm; Pwd=m; trusted_connection=yes")
initdata <- sqlQuery(dbconnection,paste("select * from pessoa;"))
odbcClose(dbconnection)
library(RODBC)
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=CMT;Uid=cm; Pwd=cm; trusted_connection=yes")
initdata <- sqlQuery(dbconnection,paste("select * from pessoa;"))
odbcClose(dbconnection)
library(RODBC)
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=CMT;trusted_connection=yes")
initdata <- sqlQuery(dbconnection,paste("select * from pessoa;"))
odbcClose(dbconnection)
library(RODBC)
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=CMT;trusted_connection=yes")
initdata <- sqlQuery(dbconnection,paste("select * from pessoa;"))
library(RODBC)
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=CMT;Uid=cm; Pwd=cm; trusted_connection=yes")
initdata <- sqlQuery(dbconnection,paste("select * from pessoa;"))
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=CMT;Uid=cm; Pwd=cm; trusted_connection=yes")
initdata <- sqlQuery(dbconnection,paste("select * from pessoa;"))
library("RODBC")
#library("XLConnect")
dbhandle <- odbcDriverConnect('driver={SQL Server};server=hostname;database=CMT;trusted_connection=true')
currTableSQL<-paste("SELECT * From pessoa",sep="")
currTableDF<-sqlQuery(dbhandle,currTableSQL)
library("RODBC")
#library("XLConnect")
dbhandle <- odbcDriverConnect('driver={SQL Server};server=hostname;database=CMT;trusted_connection=true')
currTableSQL<-paste("SELECT * From pessoa")
currTableDF<-sqlQuery(dbhandle,currTableSQL)
library("RODBC")
#library("XLConnect")
dbhandle <- odbcDriverConnect('driver={SQL Server};server=hostname;database=CMT;trusted_connection=true')
currTableSQL<-paste("SELECT * From pessoa")
currTableDF<-sqlQuery(dbhandle,currTableSQL)
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=localhost; database=CMT;trusted_connection=yes;")
select * from pessoa;
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=localhost; database=CMT;trusted_connection=yes;")
df <- sqlQuery(cn, "select * FROM [CMT].[dbo].[pessoa]")
head(df)
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=db.dataexact.com.br; database=fernet_dataexact;trusted_connection=yes;")
df <- sqlQuery(cn, "select * FROM [fernet_dataexact].[dbo].[dimClientes]")
head(df)
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=db.dataexact.com.br; database=fernet_dataexact;trusted_connection=yes;")
df <- sqlQuery(cn, "select * FROM [fernet_dataexact].[dbo].[dimClientes]")
head(df)
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=db.dataexact.com.br; database=fernet_dataexact;trusted_connection=yes;")
df <- sqlQuery(cn, "select * FROM [fernet_dataexact].[dbo].[dimClientes]")
head(df)
head(df)
head(df)
head(df)
head(df)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=db.dataexact.com.br; database=fernet_dataexact;trusted_connection=yes;")
df <- sqlQuery(cn, "select * FROM [fernet_dataexact].[dbo].[dimClientes]")
head(df)
library(RODBC)
##connection string
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client 11.0};server=localhost; database=CMT;trusted_connection=yes;")
df <- sqlQuery(cn, "select * FROM [CMT].[dbo].[pessoa] where  idpessoa between 1 and 200")
head(df)
2+2
vet =  c(1:30)
vet
?list
mat =matrix(1:20,nrow=4,ncol=4)
mat
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lis
list = list(vat,mat)
list <- list(vat,mat)
list <- list(vet,mat)
list
list1 =  list c(vet,mat)
list1
list1 =  list(vet,mat)
list1
?read.table
dt <- data.frame(read.table('http://data.princeton.edu/wws509/datasets/effort.dat'))
dt
names(dt) <- c("config", "esfc", "chang")
dt
iris(dt)
iris(dt)
iris(iris)
plot(iris)
print(iris)
view(iris)
view(dt)
View(dt)
plot(dt)
ggplot2(dt)
plot(dt)
?subset
View(iris)
View(iris)
sub <- subset(iris,epal.Length > 7)
sub <- subset(iris,Sepal.Length > 7)
sub
?dplyr
?slice()
list.files()
for (i in 1:length(vec1))
{ if (vec1[i]>10){
print(vec1[i])
print('maior que 10')
}
else
print(vec1)
print('menor que 10')
}
vec1 <- c(12, 3, 4, 19, 34)
vec1
for (i in 1:length(vec1))
{ if (vec1[i]>10){
print(vec1[i])
print('maior que 10')
}
else
print(vec1)
print('menor que 10')
}
for (i in 1:length(lst2))
{
print(lst2{{i}})
}
for (i in 1:length(lst2))
{
print(lst2[[i]])
}
for (i in 1:length(lst2))
{
print(lst2([[i]])
}
for (i in 1:length(lst2))
{
print(lst2[[i]])
}
lst2 <- list(2, 3, 5, 7, 11, 13)
for (i in 1:length(lst2))
{
print(lst2[[i]])
}
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
# Faça uma multiplicação element-wise e multiplicação normal entre as materizes
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
mat3 <- mat1 * mat2
mat4 <- mat1%*% mat2 #%*% * no R
mat4
vec1 <- c(12,5,4,10)
names(vec1) <- c('1','2','3','4')
vec1
vec1 <- c(12,5,4,10)
names(vec1) <- c('1','2','3','4')
vec1
mat1 <- matrix(c(1:50),nrow=5,ncol=5,byrow = T)
mat1
dimnames(mat1) =(list(c('obs1','obs2','obs3','obs4','obs5'),c('var1','var2','var3','var4','var5')))
mat1
list <- list(c(1,2,c(1,2,3)))
list
names (list) <- ('dim1','dim2','dim3')
names (list) <- c('dim1','dim2','dim3')
names (list1) <- c('dim1','dim2','dim3')
list1 <- list(c(1,2,c(1,2,3)))
names (list1) <- c('dim1','dim2','dim3')
list1 <- list(c(1,2,c(1,2,3)))
names (list1) <- c('dim1','dim2','dim3')
list1 <- list(c(1,2,c(1,2,3)))
names (list1) <- c('dim1','dim2','dim3')
list1 <- list(c(2,3,c(1,2,3)))
names (list1) <- c('dim1','dim2','dim3')
list1 <- list(2,3,c(1,2,3))
names (list1) <- c('dim1','dim2','dim3')
list1
df1<- data.frame(c("a","b","c"),c(4.5,4.6,4.7),c(TRUE,FALSE,TRUE))
colnames(df1) <- c('caracteres','float','logico')
rownames(df1) <- c('obs1','obs2','obs3')
df1
mat2 <- matrix(1:90, 10)
mat2
mat2[sample(1:50.10)]=NA
mat2
mat2[sample(1:50,10)]=NA
mat2
mat2 <- matrix(1:90, 10)
mat2[sample(1:50,10)]=NA
mat2
mat2 <- matrix(1:90, 10)
mat2
mat2[1]
mat2[10]
mat2[1:10]
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
rowsum(mat1)
colSums(mat1)
rowsum(mat1)
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
rowsum(mat1)
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat1
rowSums(mat1)
colSums(mat1)
colSums(mat1[1])
a <- c(100, 10, 10000, 1000)
a
order(a)
a[order(a)]
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
for (i in mat1){
if(i >15){
print(i)
}
}
ggplot(mtcars,aes(x=mpg),binwidth=30) +geom_histogram()
labs(fill="cyl")+
theme(legend.position = "left")
library(ggplot2)
ggplot(mtcars,aes(x=mpg),binwidth=30) +geom_histogram()
labs(fill="cyl")+
theme(legend.position = "left")
ggplot(mtcars,aes(x=mpg),binwidth=30) +geom_histogram()
labs(fill="cyl")+
theme(legend.position = "top")
ggplot(mtcars,aes(x=mpg),binwidth=30) +geom_histogram()
labs(fill="mpg")+
theme(legend.position = "top")
ggplot(mtcars,aes(x=mpg, y=disp,colour =as.factor(cyl)))+
geom_point()+
facet_grid(am ~. )#compara am com todos os paraemntros .
install.packages("gridExtra")
library(gridExtra)
data("diamonds")
data("diamonds")
data(diamonds)
View(diamonds)
plot1 <- qplot(price,data = diamonds,binwidth = 1000)
plot1
?qplot
?qplot
?binwidth
plot2 <- qplot(carat,data = diamonds,colour=cut)
plot2 <- qplot(carat,data = diamonds,colour=cut)
plot2
grid.arrange(plot1,plot2,ncol=1)
?geom_density
??geom_density
?geom_density
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5)
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5)+
xlim(55, 70)
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5)+
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5)
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5)
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5,alpha=0.2)
ggplot(data= diamonds,aes(x=price,group=cut,fill=cut))+
geom_density(ajust=1.5,position = "fill")
install.packages("reshape20","plotly")
install.packages("reshape20")
install.packages("plotly")
library(reshape20)
install.packages("reshape2")
library(reshape)
install.packages("plotly")
library(reshape)
library(reshape2)
library(plotly)
sp <- ggplot(tips,aes(x=total_bill,y=tip/total_bill))+
geom_point(shape= 1)
sp + facet_grid(sex ~.)
ggplotly()
sp+ facet_grid(.~sex)
ggplotly()
sp + facet_wrap( ~day,ncol =2)
ggplotly()
ibrary(rMaps)
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
install.packages("rjson")
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
ggplot(data = mapa)+
geom_polygon(aes(x=long,y=lat,fill=region,group=group),color="white")+
coord_fixed(1.3)+
guides(fill=FALSE)
library(maps)
library(mapdata)
library(ggplot2)
gg1 <- ggplot()+
geom_polygon(data= mapa,aes(x=long,y=lat,group=group),fill="green",color="blue")+
coord_fixed(1.3)
gg1
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
View(mapa)
mapa <- map_data("world")
View(mapa)
dim(mapa)
library(odbc)
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "DM_Reservas",
UID = "cm",
PWD = "cm",
Port = 1433)
alltables = dbListTables(con)
alltables
DimHoteis                 = dbReadTable(con, "DimHoteis")
DimHoteis                 = dbReadTable(con, "DimHoteis")
alltables
alltables = dbListTables(con)
alltables
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "DM_Reservas",
UID = "cm",
PWD = "cm",
Port = 1433)
alltables = dbListTables(con)
alltables
DimHoteis                 = dbReadTable(con, "DimHoteis")
?odbc
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "DM_Reservas",
UID = "cm",
PWD = "cm",
Port = 1433)
alltables = dbListTables(con)
alltables
View(DimHoteis)
DimHoteis                 <- dbReadTable(con, "DimHoteis")
alltables
class(alltables)
data <- dbWriteTable(con, "iris", iris)
data
view(data)
View(DimHoteis)
View(alltables)
dbListTables(con)
dbListTables(con, table_name = "D%")
dbListTables(con, table_name = "Dim%")
dbListFields(con, "DimHoteis")
data <- dbReadTable(con, "DimHoteis")
library(DBI)
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={SQL Server};Uid=cm;Pwd=cm;Host=localhost;Port=1433;Database=DM_Reservas;")
library(DBI)
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={SQLServer};Uid=cm;Pwd=cm;Host=localhost;Port=1433;Database=DM_Reservas;")
library(DBI)
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={SQL Server};Uid=cm;Pwd=cm;Host=localhost;Port=1433;Database=DM_Reservas;")
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={MicrosoftSQLServer};Uid=cm;Pwd=cm;Host=localhost;Port=1433;Database=DM_Reservas;")
library(DBI)
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={MicrosoftSQLServer};Uid=cm;Pwd=cm;Host=localhost;Port=1433;Database=DM_Reservas;")
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={ODBC Driver 13 for SQL Server};Uid=cm;Pwd=cm;Host=localhost;Port=1433;Database=DM_Reservas;")
install.packages("RODBC")
library("RODBC")
conn <- odbcDriverConnect('driver={SQL Server};server=localhost;database=DM_Reservas;trusted_connection=true')
con <- odbcDriverConnect('driver={SQL Server};server=localhost;database=DM_Reservas;trusted_connection=true')
dbListTables(con)
alltables = dbListTables(con)
con <- odbcDriverConnect('driver={SQL Server};server=localhost;database=DM_Reservas;trusted_connection=true')
data <- sqlQuery(con, "SELECT * FROM DM_Reservas.DimHoteis;")
data
data <- sqlQuery(con, "SELECT * FROM DM_Reservas.DimHoteis;")
data
data <- sqlQuery(con, "SELECT * FROM DM_Reservas.DimHoteis;")
data <- select(data, TransactionDate, ActualCost)
data <- select(id, hotel)
data <- sqlQuery(con, "SELECT * FROM dbo.DimHoteis;")
data
data
DimHoteis                 = dbReadTable(con, "DimHoteis")
DimHoteis                 = sqlQuery(con, "SELECT * FROM dbo.DimHoteis;")
DimHoteis
DimOrigem                 = sqlQuery(con, "SELECT * FROM db.oDimOrigem;")
DimStatusReservas         = sqlQuery(con, "SELECT * FROM dbo.DimStatusReservas;")
DimTipoUH                 = sqlQuery(con, "SELECT * FROM dbo.DimTipoUH;")
ftHospede                 = sqlQuery(con, "SELECT * FROM dbo.ftHospede;")
ftReservas                = sqlQuery(con, "SELECT * FROM dbo.ftReservas;")
ftReservas
View(ftReservas)
setwd("C:/Users/FRANCISCOPC/OneDrive/ALL_PROJECTS/GitHub/InteligenciaHoteleira/R")
class(DimHoteis)
library(dplyr)
DimOrigem
View(DimOrigem)
DimHoteis                 = sqlQuery(con, "SELECT * FROM dbo.DimHoteis;")
DimOrigem                 = sqlQuery(con, "SELECT * FROM db.oDimOrigem;")
DimStatusReservas         = sqlQuery(con, "SELECT * FROM dbo.DimStatusReservas;")
DimTipoUH                 = sqlQuery(con, "SELECT * FROM dbo.DimTipoUH;")
ftHospede                 = sqlQuery(con, "SELECT * FROM dbo.ftHospede;")
ftReservas                = sqlQuery(con, "SELECT * FROM dbo.ftReservas;")
View(DimHoteis)
View(DimOrigem)
DimOrigem                 = sqlQuery(con, "SELECT * FROM db.DimOrigem;")
DimOrigem
DimOrigem                 = sqlQuery(con, "SELECT * FROM dbo.DimOrigem;")
DimOrigem
ftHospede
ftReservas
df <- DimHoteis %>% inner_join(ftReservas,by="IDHOTEL")
df
View(df)
df1 <- df %>% inner_join(ftReservas,by="IDORIGEM")
View(df)
df <- DimHoteis %>% inner_join(ftReservas,by="IDHOTEL")
df1 <- DimOrigem %>% inner_join(ftReservas,by="IDORIGEM")
View(df1)
merge(df,df1)
merge(df,df1)
View(df)
merge1 <-  merge(df,df1)
View(merge1)
